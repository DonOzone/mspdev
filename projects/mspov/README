MSP430 POV Display
==================

![mspov](schematics/mspov.jpg "msPOV Hardware Schematics")

This code toggles the output pins of P1.0-P1.7 to display a message in rapid
succession. This effect is called "Persistence of Vision".

This project shows how to make use of the timer interrupts on the MSP430 series
microcontrollers to display that message. For the sake of making it compile
over a wide number of devices, the ta0compat.h file is provided in order to map
the Timer0 A0 functionality from the devices that have more than one timer to 
the defines present in single-timer devices.

The code in main() is responsible for setting up the timers and enable global
interrupts so that the ISR occur when they hit the target value.

Requirements
------------

To compile this project you need a MSP430-based device and programmer. It is
designed to be used with the Launchpad, but the binaries should be universal
and can be programmed onto any compatible device with any programmer.

 * mspdebug is needed to identify the device as well as program it
 * msp430-gcc is needed to compile the project
 * lib430 is included if you checked out the code from SVN. Please refer to
   the lib430 documentation for information on how to build it and use it
   with mspov.
 
Implementation
--------------

 * P1.[0..7]   Red LEDs
 * P2.1        Green LED
 * P2.[2..3]   Programmer light detector circuit
 * P2.4        Menu button
 * P2.5        Select button

### Using

Using MSPov is simple. Hold the menu button. The green light will light up and
one of the red led:s will start flashing. When you go full circle the green
LED will start flashing. This means "exit menu".

If you select a slot with the select button and the menu button, the light for
that slot will stay on and the green led will start fashing. Put the sensors
toward your screen running the "povprog" binary. When the MSPov detects a sync
signal, the green LED will come on and it will remain on until the full message
have been received and programmed. At this time all lights will be off.

Tapping the menu button once will start the message. Tapping the select button
will change to the next pattern.

The Makefile
------------

The makefile is based on the mspdev skeleton makefile and thus prvides the
following actions:

 * all - Build all the source files, link the binary and then call on mspdebug
   to program the device. This is the default action, and thus just calling
   make will instantly deploy the project on the microcontroller, just like
   with the picdev makefile.

 * bin - Build all the source files and link the binary in elf and hex format.
   No programming is done here.

 * prog - Program the device with the binary.

 * clean - Clean the build environment and remove all temporary files.

 * listing - Generate assembly source listings from the .c files.

 * identify - Identify the attached microcontroller using mspdebug.

Dependencies
------------

You need to build lib430 for your microcontroller before attempting to build
mspov. The original reference design calls for two different microcontrollers
to be in charge of the leds and the user interface respectively.
